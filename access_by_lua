local function dump(o)
    if type(o) == 'table' then
        local s = '{ '
        for k,v in pairs(o) do
            if type(k) ~= 'number' then k = '"'..k..'"' end
            s = s .. '['..k..'] = ' .. dump(v) .. ','
        end
        return s .. '} '
    else
        return tostring(o)
    end
end

local function contains(list, x)
    for _, v in pairs(list) do
        if v == x then return true end
    end
    return false
end

local KEYCLOAK_INTERNAL_ENDPOINT="http://192.168.50.190:8080"
local KEYCLOAK_EXTERNAL_ENDPOINT="http://192.168.50.190:8080"
-- local KEYCLOAK_LOGOUT_REDIRECT_URI="http://comfyui.szqrinfo.com"
local KEYCLOAK_LOGOUT_REDIRECT_URI="https://www.bilibili.com/"
local KEYCLOAK_REALM="React"
local KEYCLOAK_CLIENT="React"
local KEYCLOAK_CLIENT_ROLE="ReactRole"
local KEYCLOAK_SECRET="nNgroGz7afoxHxBAzcmmgFZJ6V2vA9fM"

local opts = {
    redirect_uri = "/redirect_uri",
    accept_none_alg = false,
    renew_access_token_on_expiry = true,
    discovery = { 
        issuer = string.format("%s/realms/%s",KEYCLOAK_EXTERNAL_ENDPOINT,KEYCLOAK_REALM),
        authorization_endpoint = string.format("%s/realms/%s/protocol/openid-connect/auth",KEYCLOAK_EXTERNAL_ENDPOINT,KEYCLOAK_REALM),
        id_token_signing_alg_values_supported = { "RS256", "RS384", "RS512" },
        token_signing_alg_values_expected = { "RS256", "RS384", "RS512" },
        token_endpoint = string.format("%s/realms/%s/protocol/openid-connect/token",KEYCLOAK_INTERNAL_ENDPOINT,KEYCLOAK_REALM),
        jwks_uri = string.format("%s/realms/%s/protocol/openid-connect/certs",KEYCLOAK_INTERNAL_ENDPOINT,KEYCLOAK_REALM),
        userinfo_endpoint = string.format("%s/realms/%s/protocol/openid-connect/userinfo",KEYCLOAK_INTERNAL_ENDPOINT,KEYCLOAK_REALM),
        revocation_endpoint = string.format("%s/realms/%s/protocol/openid-connect/revoke",KEYCLOAK_INTERNAL_ENDPOINT,KEYCLOAK_REALM),
        end_session_endpoint = string.format("%s/realms/%s/protocol/openid-connect/logout",KEYCLOAK_EXTERNAL_ENDPOINT,KEYCLOAK_REALM),
        introspection_endpoint = string.format("%s/realms/%s/protocol/openid-connect/token/introspect",KEYCLOAK_INTERNAL_ENDPOINT,KEYCLOAK_REALM),
    },            
    client_id = KEYCLOAK_CLIENT,
    token_endpoint_auth_method = "client_secret_basic", 
    client_secret = KEYCLOAK_SECRET,
    logout_path = "/logout",
    -- disable redirect_after_logout_uri will go to end_session_endpoint, 
    -- otherwise it will go to redirect_after_logout_uri
    -- redirect_after_logout_uri = KEYCLOAK_LOGOUT_REDIRECT_URI,
    redirect_after_logout_with_id_token_hint = false,
    scope = "openid",
    session_contents = {id_token=true, access_token=true},
}

local res, err, target_url, session = require("resty.openidc").authenticate(opts)
if err then
    ngx.status = 403
    ngx.log(ngx.NOTICE, dump(err))
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

local parsed_token, token_err = require("resty.openidc").jwt_verify(res.access_token, opts)

if (parsed_token.resource_access == nil or parsed_token.resource_access[KEYCLOAK_CLIENT] == nil) then
    ngx.status = 403
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User has no role, therefore access was denied")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

if	(parsed_token.resource_access[KEYCLOAK_CLIENT].roles == nil) then
    ngx.status = 403
    -- ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User has no role for client ${KEYCLOAK_CLIENT}, therefore denied access")
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User has no role for client " .. KEYCLOAK_CLIENT .. ", therefore denied access")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

if not contains(parsed_token.resource_access[KEYCLOAK_CLIENT].roles, KEYCLOAK_CLIENT_ROLE) then
    ngx.status = 403
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User got an access denied")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

local cjson = require("cjson")
ngx.req.set_header("X-USER", cjson.encode(res))
