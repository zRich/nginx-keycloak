local function dump(o)
    if type(o) == 'table' then
        local s = '{ '
        for k,v in pairs(o) do
            if type(k) ~= 'number' then k = '"'..k..'"' end
            s = s .. '['..k..'] = ' .. dump(v) .. ','
        end
        return s .. '} '
    else
        return tostring(o)
    end
end

local function contains(list, x)
    for _, v in pairs(list) do
        if v == x then return true end
    end
    return false
end

local opts = {
    redirect_uri = "/redirect_uri",
    accept_none_alg = false,
    renew_access_token_on_expiry = true,
    discovery = { 
        issuer = "${KEYCLOAK_EXTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}",
        authorization_endpoint = "${KEYCLOAK_EXTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth",
        id_token_signing_alg_values_supported = { "RS256", "RS384", "RS512" },
        token_signing_alg_values_expected = { "RS256", "RS384", "RS512" },
        token_endpoint = "${KEYCLOAK_INTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token",
        jwks_uri = "${KEYCLOAK_INTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs",
        userinfo_endpoint = "${KEYCLOAK_INTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo",
        revocation_endpoint = "${KEYCLOAK_INTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/revoke",
        end_session_endpoint = "${KEYCLOAK_EXTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/logout",
        introspection_endpoint = "${KEYCLOAK_INTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token/introspect",
    },            client_id = "${KEYCLOAK_CLIENT}",
    token_endpoint_auth_method = "client_secret_basic", 
    client_secret = "${KEYCLOAK_SECRET}",
    logout_path = "/logout",
    redirect_after_logout_uri = "${KEYCLOAK_EXTERNAL_ENDPOINT}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/logout?redirect_uri=${KEYCLOAK_LOGOUT_REDIRECT_URI}",
    redirect_after_logout_with_id_token_hint = false,
    scope = "openid",
    session_contents = {id_token=true, access_token=true}
}

local res, err, target_url, session = require("resty.openidc").authenticate(opts)
if err then
    ngx.status = 403
    ngx.log(ngx.NOTICE, dump(err))
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

local access_token, err = require("resty.openidc").access_token(opts, session)
local parsed_token, token_err = require("resty.openidc").jwt_verify(res.access_token, opts)

if (parsed_token.resource_access == nil or parsed_token.resource_access.${KEYCLOAK_CLIENT} == nil) then
    ngx.status = 403
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User has no role, therefore access was denied")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

client_roles = parsed_token.resource_access.${KEYCLOAK_CLIENT}.roles
if	(client_roles == nil) then
    ngx.status = 403
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User has no role for client ${KEYCLOAK_CLIENT}, therefore denied access")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

client_role = "${KEYCLOAK_CLIENT_ROLE}"

if not contains(client_roles, client_role) then
    ngx.status = 403
    ngx.log(ngx.NOTICE, res.id_token.preferred_username .. " - User got an access denied")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end